options:
  parameters:
    alias: ''
    author: jreitmei
    catch_exceptions: 'True'
    comment: ''
    copyright: ''
    description: ''
    gen_linking: dynamic
    generate_options: qt_gui
    generator_class_name: PythonQtGuiGenerator
    generator_module: gnuradio.grc.workflows.python_qt_gui
    hier_block_src_path: '.:'
    id: run_MUSIC_RootMUSIC_filesave
    max_nouts: '0'
    output_language: python
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    thread_safe_setters: ''
    title: Not titled yet
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: antenna_calibration_file_name
  id: variable
  parameters:
    comment: ''
    value: os.path.join(input_variables.DirectoryConfigFiles, input_variables.AntennaCalibration)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 32.0]
    rotation: 0
    state: enabled
- name: input_variables
  id: variable_struct
  parameters:
    comment: "input_variables: \nContains all the user-defined variables."
    field0: ''
    field1: SampleRate
    field10: PSpectrumLength
    field11: DirectoryConfigFiles
    field12: RelativePhaseOffsets
    field13: AntennaCalibration
    field14: ''
    field15: ''
    field16: ''
    field17: ''
    field18: ''
    field19: ''
    field2: CenterFreq
    field3: RxAddr
    field4: ''
    field5: NumArrayElements
    field6: NormSpacing
    field7: SnapshotSize
    field8: OverlapSize
    field9: NumTargets
    value0: 5e3
    value1: 1e6
    value10: 2**10
    value11: '"/tmp"'
    value12: '"measure_relative_phase_offsets_446MHz.cfg"'
    value13: '"calibration_lin_array_446MHz.cfg"'
    value14: '0'
    value15: '0'
    value16: '0'
    value17: '0'
    value18: '0'
    value19: '0'
    value2: '446031250 '
    value3: '"addr=10.94.17.47"'
    value4: '0'
    value5: '4'
    value6: '0.5'
    value7: 2**11
    value8: 2**10
    value9: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 132.0]
    rotation: 0
    state: enabled
- name: rel_phase_offsets_file_name
  id: variable
  parameters:
    comment: ''
    value: os.path.join(input_variables.DirectoryConfigFiles, input_variables.RelativePhaseOffsets)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 32.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_arg_0_0_0_0_1
  id: blocks_complex_to_arg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 680.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_arg_0_0_0_0_1_0
  id: blocks_complex_to_arg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 872.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_arg_0_0_0_1
  id: blocks_complex_to_arg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 648.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_arg_0_0_0_1_0
  id: blocks_complex_to_arg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 840.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_arg_0_0_1
  id: blocks_complex_to_arg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 616.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_arg_0_0_1_0
  id: blocks_complex_to_arg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 808.0]
    rotation: 0
    state: enabled
- name: blocks_divide_xx_0
  id: blocks_divide_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [808, 568.0]
    rotation: 0
    state: enabled
- name: blocks_divide_xx_0_0
  id: blocks_divide_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [808, 632.0]
    rotation: 0
    state: enabled
- name: blocks_divide_xx_0_0_0
  id: blocks_divide_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [808, 696.0]
    rotation: 0
    state: enabled
- name: blocks_divide_xx_0_0_0_0
  id: blocks_divide_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 888.0]
    rotation: 0
    state: enabled
- name: blocks_divide_xx_0_0_1
  id: blocks_divide_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 824.0]
    rotation: 0
    state: enabled
- name: blocks_divide_xx_0_1
  id: blocks_divide_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 760.0]
    rotation: 0
    state: enabled
- name: blocks_null_sink_0_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '2'
    type: float
    vlen: input_variables.NumTargets
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2080, 344.0]
    rotation: 0
    state: enabled
- name: doa_MUSIC_lin_array_0
  id: doa_MUSIC_lin_array
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    inputs: input_variables.NumArrayElements
    maxoutbuf: '0'
    minoutbuf: '0'
    norm_spacing: input_variables.NormSpacing
    num_targets: input_variables.NumTargets
    pspectrum_len: input_variables.PSpectrumLength
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1288, 336.0]
    rotation: 0
    state: enabled
- name: doa_MUSIC_lin_array_0_0
  id: doa_MUSIC_lin_array
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    inputs: input_variables.NumArrayElements
    maxoutbuf: '0'
    minoutbuf: '0'
    norm_spacing: input_variables.NormSpacing
    num_targets: input_variables.NumTargets
    pspectrum_len: input_variables.PSpectrumLength
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1288, 48.0]
    rotation: 0
    state: enabled
- name: doa_antenna_correction_0
  id: doa_antenna_correction
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    config_filename: antenna_calibration_file_name
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ant_ele: input_variables.NumArrayElements
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 320.0]
    rotation: 0
    state: enabled
- name: doa_autocorrelate_0
  id: doa_autocorrelate
  parameters:
    affinity: ''
    alias: ''
    avg_method: Forward-Backward
    comment: ''
    inputs: input_variables.NumArrayElements
    maxoutbuf: '0'
    minoutbuf: '0'
    overlap_size: input_variables.OverlapSize
    snapshot_size: input_variables.SnapshotSize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 320.0]
    rotation: 0
    state: enabled
- name: doa_autocorrelate_0_0
  id: doa_autocorrelate
  parameters:
    affinity: ''
    alias: ''
    avg_method: Forward-Backward
    comment: ''
    inputs: input_variables.NumArrayElements
    maxoutbuf: '0'
    minoutbuf: '0'
    overlap_size: input_variables.OverlapSize
    snapshot_size: input_variables.SnapshotSize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 32.0]
    rotation: 0
    state: enabled
- name: doa_find_local_max_0
  id: doa_find_local_max
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_max_vals: input_variables.NumTargets
    vector_len: input_variables.PSpectrumLength
    x_max: '180.0'
    x_min: '0.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1576, 440.0]
    rotation: 0
    state: enabled
- name: doa_find_local_max_0_0
  id: doa_find_local_max
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_max_vals: input_variables.NumTargets
    vector_len: input_variables.PSpectrumLength
    x_max: '180.0'
    x_min: '0.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1568, 48.0]
    rotation: 0
    state: enabled
- name: doa_phase_correct_hier_0_0
  id: doa_phase_correct_hier
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    config_filename: rel_phase_offsets_file_name
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: input_variables.NumArrayElements
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 168.0]
    rotation: 0
    state: enabled
- name: doa_rootMUSIC_linear_array_0
  id: doa_rootMUSIC_linear_array
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    norm_spacing: input_variables.NormSpacing
    num_ant_ele: '4'
    num_targets: input_variables.NumTargets
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 160.0]
    rotation: 0
    state: enabled
- name: doa_rootMUSIC_linear_array_0_0
  id: doa_rootMUSIC_linear_array
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    norm_spacing: input_variables.NormSpacing
    num_ant_ele: '4'
    num_targets: input_variables.NumTargets
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1288, 440.0]
    rotation: 0
    state: enabled
- name: doa_x440_usrp_source_0
  id: doa_x440_usrp_source
  parameters:
    addresses: input_variables.RxAddr
    affinity: ''
    alias: ''
    center_freq: input_variables.CenterFreq
    comment: ''
    device_args: master_clock_rate=250e6
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: input_variables.SampleRate
    sources: input_variables.NumArrayElements
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 168.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nfrom datetime import\
      \ datetime\nimport os\n\nclass blk(gr.sync_block):\n    \"\"\"Triggered Float\
      \ Recorder with Sample Skipping\"\"\"\n\n    def __init__(self, skip_interval=20,\
      \ samples_to_record=10):\n        gr.sync_block.__init__(\n            self,\n\
      \            name='RootMUSIC_calibrated',\n            in_sig=[np.float32],\n\
      \            out_sig=[]\n        )\n\n        self.angle = 0\n        self.folder\
      \ = \"testdata/calibrated/RootMUSIC\"\n        os.makedirs(self.folder, exist_ok=True)\n\
      \n        self.recording = False\n        self.skip_interval = skip_interval\n\
      \        self.samples_to_record = samples_to_record\n        self.recorded_samples\
      \ = []\n        self.sample_counter = 0\n\n        # Message-Port f\xFCr Trigger\n\
      \        self.message_port_register_in(gr.pmt.intern(\"in\"))\n        self.set_msg_handler(gr.pmt.intern(\"\
      in\"), self.handle_trigger)\n\n    def handle_trigger(self, msg):\n        if\
      \ not self.recording and self.angle <= 180:\n            print(f\"[Trigger]\
      \ Recording started at angle {self.angle}\xB0\")\n            self.recording\
      \ = True\n            self.recorded_samples = []\n            self.sample_counter\
      \ = 0\n\n    def work(self, input_items, output_items):\n        in0 = input_items[0]\n\
      \n        for sample in in0:\n            if self.recording:\n             \
      \   # Only record every skip_interval-th sample using modulo\n             \
      \   if self.sample_counter % self.skip_interval == 0:\n                    self.recorded_samples.append(sample)\n\
      \n                self.sample_counter += 1\n\n                if len(self.recorded_samples)\
      \ >= self.samples_to_record:\n                    # Save\n                 \
      \   timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n               \
      \     filename = f\"record_{self.angle}deg_{timestamp}.dat\"\n             \
      \       filepath = os.path.join(self.folder, filename)\n\n                 \
      \   with open(filepath, \"w\") as f:\n                        for s in self.recorded_samples:\n\
      \                            f.write(f\"{s}\\n\")\n\n                    print(f\"\
      [Recorder] File saved: {filepath}\")\n\n                    # reset recording\n\
      \                    self.recording = False\n                    self.angle\
      \ += 10\n\n                    if self.angle > 180:\n                      \
      \  print(\"[Recorder] Maximum angle limit reached. Recording stopped.\")\n \
      \                   break  # recording finished\n\n        return len(in0)\n\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_to_record: '10'
    skip_interval: '50'
  states:
    _io_cache: ('RootMUSIC_calibrated', 'blk', [('skip_interval', '20'), ('samples_to_record',
      '10')], [('0', 'float', 1), ('in', 'message', 1)], [], 'Triggered Float Recorder
      with Sample Skipping', ['samples_to_record', 'skip_interval'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2080, 536.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nfrom datetime import\
      \ datetime\nimport os\n\nclass blk(gr.sync_block):\n    \"\"\"Triggered Float\
      \ Recorder with Sample Skipping\"\"\"\n\n    def __init__(self, skip_interval=20,\
      \ samples_to_record=10):\n        gr.sync_block.__init__(\n            self,\n\
      \            name='RootMUSIC_uncalibrated',\n            in_sig=[np.float32],\n\
      \            out_sig=[]\n        )\n\n        self.angle = 0\n        self.folder\
      \ = \"testdata/uncalibrated/RootMUSIC\"\n        os.makedirs(self.folder, exist_ok=True)\n\
      \n        self.recording = False\n        self.skip_interval = skip_interval\n\
      \        self.samples_to_record = samples_to_record\n        self.recorded_samples\
      \ = []\n        self.sample_counter = 0\n\n        # Message-Port f\xFCr Trigger\n\
      \        self.message_port_register_in(gr.pmt.intern(\"in\"))\n        self.set_msg_handler(gr.pmt.intern(\"\
      in\"), self.handle_trigger)\n\n    def handle_trigger(self, msg):\n        if\
      \ not self.recording and self.angle <= 180:\n            print(f\"[Trigger]\
      \ Recording started at angle {self.angle}\xB0\")\n            self.recording\
      \ = True\n            self.recorded_samples = []\n            self.sample_counter\
      \ = 0\n\n    def work(self, input_items, output_items):\n        in0 = input_items[0]\n\
      \n        for sample in in0:\n            if self.recording:\n             \
      \   # Only record every skip_interval-th sample using modulo\n             \
      \   if self.sample_counter % self.skip_interval == 0:\n                    self.recorded_samples.append(sample)\n\
      \n                self.sample_counter += 1\n\n                if len(self.recorded_samples)\
      \ >= self.samples_to_record:\n                    # Save\n                 \
      \   timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n               \
      \     filename = f\"record_{self.angle}deg_{timestamp}.dat\"\n             \
      \       filepath = os.path.join(self.folder, filename)\n\n                 \
      \   with open(filepath, \"w\") as f:\n                        for s in self.recorded_samples:\n\
      \                            f.write(f\"{s}\\n\")\n\n                    print(f\"\
      [Recorder] File saved: {filepath}\")\n\n                    # reset recording\n\
      \                    self.recording = False\n                    self.angle\
      \ += 10\n\n                    if self.angle > 180:\n                      \
      \  print(\"[Recorder] Maximum angle limit reached. Recording stopped.\")\n \
      \                   break  # recording finished\n\n        return len(in0)\n\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_to_record: '10'
    skip_interval: '50'
  states:
    _io_cache: ('RootMUSIC_uncalibrated', 'blk', [('skip_interval', '20'), ('samples_to_record',
      '10')], [('0', 'float', 1), ('in', 'message', 1)], [], 'Triggered Float Recorder
      with Sample Skipping', ['samples_to_record', 'skip_interval'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2080, 472.0]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nfrom datetime import\
      \ datetime\nimport os\n\nclass blk(gr.sync_block):\n    \"\"\"Triggered Float\
      \ Recorder with Sample Skipping\"\"\"\n\n    def __init__(self, skip_interval=20,\
      \ samples_to_record=10):\n        gr.sync_block.__init__(\n            self,\n\
      \            name='MUSIC_uncalibrated',\n            in_sig=[np.float32],\n\
      \            out_sig=[]\n        )\n\n        self.angle = 0\n        self.folder\
      \ = \"testdata/uncalibrated/MUSIC\"\n        os.makedirs(self.folder, exist_ok=True)\n\
      \n        self.recording = False\n        self.skip_interval = skip_interval\n\
      \        self.samples_to_record = samples_to_record\n        self.recorded_samples\
      \ = []\n        self.sample_counter = 0\n\n        # Message-Port f\xFCr Trigger\n\
      \        self.message_port_register_in(gr.pmt.intern(\"in\"))\n        self.set_msg_handler(gr.pmt.intern(\"\
      in\"), self.handle_trigger)\n\n    def handle_trigger(self, msg):\n        if\
      \ not self.recording and self.angle <= 180:\n            print(f\"[Trigger]\
      \ Recording started at angle {self.angle}\xB0\")\n            self.recording\
      \ = True\n            self.recorded_samples = []\n            self.sample_counter\
      \ = 0\n\n    def work(self, input_items, output_items):\n        in0 = input_items[0]\n\
      \n        for sample in in0:\n            if self.recording:\n             \
      \   # Only record every skip_interval-th sample using modulo\n             \
      \   if self.sample_counter % self.skip_interval == 0:\n                    self.recorded_samples.append(sample)\n\
      \n                self.sample_counter += 1\n\n                if len(self.recorded_samples)\
      \ >= self.samples_to_record:\n                    # Save\n                 \
      \   timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n               \
      \     filename = f\"record_{self.angle}deg_{timestamp}.dat\"\n             \
      \       filepath = os.path.join(self.folder, filename)\n\n                 \
      \   with open(filepath, \"w\") as f:\n                        for s in self.recorded_samples:\n\
      \                            f.write(f\"{s}\\n\")\n\n                    print(f\"\
      [Recorder] File saved: {filepath}\")\n\n                    # reset recording\n\
      \                    self.recording = False\n                    self.angle\
      \ += 10\n\n                    if self.angle > 180:\n                      \
      \  print(\"[Recorder] Maximum angle limit reached. Recording stopped.\")\n \
      \                   break  # recording finished\n\n        return len(in0)\n\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_to_record: '10'
    skip_interval: '50'
  states:
    _io_cache: ('MUSIC_uncalibrated', 'blk', [('skip_interval', '20'), ('samples_to_record',
      '10')], [('0', 'float', 1), ('in', 'message', 1)], [], 'Triggered Float Recorder
      with Sample Skipping', ['samples_to_record', 'skip_interval'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2184, 128.0]
    rotation: 0
    state: enabled
- name: epy_block_3
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nfrom datetime import\
      \ datetime\nimport os\n\nclass blk(gr.sync_block):\n    \"\"\"Triggered Float\
      \ Recorder with Sample Skipping\"\"\"\n\n    def __init__(self, skip_interval=20,\
      \ samples_to_record=10):\n        gr.sync_block.__init__(\n            self,\n\
      \            name='MUSIC_calibrated',\n            in_sig=[np.float32],\n  \
      \          out_sig=[]\n        )\n\n        self.angle = 0\n        self.folder\
      \ = \"testdata/calibrated/MUSIC\"\n        os.makedirs(self.folder, exist_ok=True)\n\
      \n        self.recording = False\n        self.skip_interval = skip_interval\n\
      \        self.samples_to_record = samples_to_record\n        self.recorded_samples\
      \ = []\n        self.sample_counter = 0\n\n        # Message-Port f\xFCr Trigger\n\
      \        self.message_port_register_in(gr.pmt.intern(\"in\"))\n        self.set_msg_handler(gr.pmt.intern(\"\
      in\"), self.handle_trigger)\n\n    def handle_trigger(self, msg):\n        if\
      \ not self.recording and self.angle <= 180:\n            print(f\"[Trigger]\
      \ Recording started at angle {self.angle}\xB0\")\n            self.recording\
      \ = True\n            self.recorded_samples = []\n            self.sample_counter\
      \ = 0\n\n    def work(self, input_items, output_items):\n        in0 = input_items[0]\n\
      \n        for sample in in0:\n            if self.recording:\n             \
      \   # Only record every skip_interval-th sample using modulo\n             \
      \   if self.sample_counter % self.skip_interval == 0:\n                    self.recorded_samples.append(sample)\n\
      \n                self.sample_counter += 1\n\n                if len(self.recorded_samples)\
      \ >= self.samples_to_record:\n                    # Save\n                 \
      \   timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n               \
      \     filename = f\"record_{self.angle}deg_{timestamp}.dat\"\n             \
      \       filepath = os.path.join(self.folder, filename)\n\n                 \
      \   with open(filepath, \"w\") as f:\n                        for s in self.recorded_samples:\n\
      \                            f.write(f\"{s}\\n\")\n\n                    print(f\"\
      [Recorder] File saved: {filepath}\")\n\n                    # reset recording\n\
      \                    self.recording = False\n                    self.angle\
      \ += 10\n\n                    if self.angle > 180:\n                      \
      \  print(\"[Recorder] Maximum angle limit reached. Recording stopped.\")\n \
      \                   break  # recording finished\n\n        return len(in0)\n\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_to_record: '10'
    skip_interval: '50'
  states:
    _io_cache: ('MUSIC_calibrated', 'blk', [('skip_interval', '20'), ('samples_to_record',
      '10')], [('0', 'float', 1), ('in', 'message', 1)], [], 'Triggered Float Recorder
      with Sample Skipping', ['samples_to_record', 'skip_interval'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2184, 72.0]
    rotation: 0
    state: enabled
- name: epy_block_4
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport os\nfrom datetime import datetime\n\n\nclass\
      \ blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block\n\
      \    \"\"\"Triggered 3-Channel Float Recorder with Angle Stepping\"\"\"\n\n\
      \    def __init__(self, skip_interval=20, samples_to_record=10):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='3-Channel Phase Offset Recorder',   # will show up in GRC\n    \
      \        in_sig=[np.float32, np.float32, np.float32],  # 3 float inputs\n  \
      \          out_sig=[]  # no outputs, this is a sink block\n        )\n     \
      \   \n        self.angle = 0\n        self.folder = \"testdata/phase_offsets\"\
      \n        os.makedirs(self.folder, exist_ok=True)\n        \n        self.recording\
      \ = False\n        self.skip_interval = skip_interval\n        self.samples_to_record\
      \ = samples_to_record\n        self.recorded_samples = [[], [], []]  # separate\
      \ lists for each channel\n        self.sample_counter = 0\n        \n      \
      \  # Message-Port for Trigger\n        self.message_port_register_in(gr.pmt.intern(\"\
      in\"))\n        self.set_msg_handler(gr.pmt.intern(\"in\"), self.handle_trigger)\n\
      \n    def handle_trigger(self, msg):\n        if not self.recording and self.angle\
      \ <= 180:\n            print(f\"[Trigger] Recording started at angle {self.angle}\xB0\
      \")\n            self.recording = True\n            self.recorded_samples =\
      \ [[], [], []]  # reset all channels\n            self.sample_counter = 0\n\n\
      \    def work(self, input_items, output_items):\n        \"\"\"Record samples\
      \ from 3 channels with trigger and angle stepping\"\"\"\n        if not self.recording:\n\
      \            return len(input_items[0])\n        \n        # Get the minimum\
      \ length across all input channels for this work call\n        min_len = min(len(input_items[0]),\
      \ len(input_items[1]), len(input_items[2]))\n        \n        for i in range(min_len):\n\
      \            if self.recording:\n                # Only record every skip_interval-th\
      \ sample using modulo\n                if self.sample_counter % self.skip_interval\
      \ == 0:\n                    # Record from all channels simultaneously\n   \
      \                 self.recorded_samples[0].append(float(input_items[0][i]))\n\
      \                    self.recorded_samples[1].append(float(input_items[1][i]))\n\
      \                    self.recorded_samples[2].append(float(input_items[2][i]))\n\
      \                \n                self.sample_counter += 1\n              \
      \  \n                # Check if we have enough samples\n                if len(self.recorded_samples[0])\
      \ >= self.samples_to_record:\n                    self._save_file()\n      \
      \              self.recording = False\n                    self.angle += 10\n\
      \                    \n                    if self.angle > 180:\n          \
      \              print(\"[Recorder] Maximum angle limit reached. Recording stopped.\"\
      )\n                    break  # recording finished for this trigger\n      \
      \  \n        return len(input_items[0])\n    \n    def _save_file(self):\n \
      \       \"\"\"Save recorded samples to file\"\"\"\n        # Safety check: ensure\
      \ all channels have data\n        if not all(len(channel_data) > 0 for channel_data\
      \ in self.recorded_samples):\n            print(\"[Recorder] Error: Not all\
      \ channels have data. Skipping save.\")\n            return\n        \n    \
      \    # Use the minimum length to avoid index errors\n        min_samples = min(len(channel_data)\
      \ for channel_data in self.recorded_samples)\n        if min_samples == 0:\n\
      \            print(\"[Recorder] Error: No samples recorded. Skipping save.\"\
      )\n            return\n        \n        timestamp = datetime.now().strftime(\"\
      %Y%m%d_%H%M%S\")\n        filename = f\"phase_offset_{self.angle}deg_{timestamp}.dat\"\
      \n        filepath = os.path.join(self.folder, filename)\n        \n       \
      \ with open(filepath, \"w\") as f:\n            f.write(f\"# 3-Channel Phase\
      \ Offset Recording\\n\")\n            f.write(f\"# Angle: {self.angle}\xB0\\\
      n\")\n            f.write(f\"# Timestamp: {timestamp}\\n\")\n            f.write(f\"\
      # Samples per channel: {min_samples}\\n\")\n            f.write(f\"# Format:\
      \ Channel_0, Channel_1, Channel_2\\n\")\n            f.write(\"#\\n\")\n   \
      \         \n            # Write values row by row using min_samples to avoid\
      \ index errors\n            for i in range(min_samples):\n                values\
      \ = [\n                    self.recorded_samples[0][i],\n                  \
      \  self.recorded_samples[1][i], \n                    self.recorded_samples[2][i]\n\
      \                ]\n                f.write(f\"{values[0]:.6f}, {values[1]:.6f},\
      \ {values[2]:.6f}\\n\")\n        \n        print(f\"[Recorder] File saved: {filepath}\
      \ with {min_samples} samples\")\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_to_record: '5'
    skip_interval: '1'
  states:
    _io_cache: ('3-Channel Phase Offset Recorder', 'blk', [('skip_interval', '20'),
      ('samples_to_record', '10')], [('0', 'float', 1), ('1', 'float', 1), ('2', 'float',
      1), ('in', 'message', 1)], [], 'Triggered 3-Channel Float Recorder with Angle
      Stepping', ['samples_to_record', 'skip_interval'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1384, 616.0]
    rotation: 0
    state: enabled
- name: epy_block_5
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport os\nfrom datetime import datetime\n\n\nclass\
      \ blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block\n\
      \    \"\"\"Triggered 3-Channel Float Recorder with Angle Stepping\"\"\"\n\n\
      \    def __init__(self, skip_interval=20, samples_to_record=10):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='3-Channel Phase Offset Recorder',   # will show up in GRC\n    \
      \        in_sig=[np.float32, np.float32, np.float32],  # 3 float inputs\n  \
      \          out_sig=[]  # no outputs, this is a sink block\n        )\n     \
      \   \n        self.angle = 0\n        self.folder = \"testdata/phase_offsets/calibrated\"\
      \n        os.makedirs(self.folder, exist_ok=True)\n        \n        self.recording\
      \ = False\n        self.skip_interval = skip_interval\n        self.samples_to_record\
      \ = samples_to_record\n        self.recorded_samples = [[], [], []]  # separate\
      \ lists for each channel\n        self.sample_counter = 0\n        \n      \
      \  # Message-Port for Trigger\n        self.message_port_register_in(gr.pmt.intern(\"\
      in\"))\n        self.set_msg_handler(gr.pmt.intern(\"in\"), self.handle_trigger)\n\
      \n    def handle_trigger(self, msg):\n        if not self.recording and self.angle\
      \ <= 180:\n            print(f\"[Trigger] Recording started at angle {self.angle}\xB0\
      \")\n            self.recording = True\n            self.recorded_samples =\
      \ [[], [], []]  # reset all channels\n            self.sample_counter = 0\n\n\
      \    def work(self, input_items, output_items):\n        \"\"\"Record samples\
      \ from 3 channels with trigger and angle stepping\"\"\"\n        if not self.recording:\n\
      \            return len(input_items[0])\n        \n        # Get the minimum\
      \ length across all input channels for this work call\n        min_len = min(len(input_items[0]),\
      \ len(input_items[1]), len(input_items[2]))\n        \n        for i in range(min_len):\n\
      \            if self.recording:\n                # Only record every skip_interval-th\
      \ sample using modulo\n                if self.sample_counter % self.skip_interval\
      \ == 0:\n                    # Record from all channels simultaneously\n   \
      \                 self.recorded_samples[0].append(float(input_items[0][i]))\n\
      \                    self.recorded_samples[1].append(float(input_items[1][i]))\n\
      \                    self.recorded_samples[2].append(float(input_items[2][i]))\n\
      \                \n                self.sample_counter += 1\n              \
      \  \n                # Check if we have enough samples\n                if len(self.recorded_samples[0])\
      \ >= self.samples_to_record:\n                    self._save_file()\n      \
      \              self.recording = False\n                    self.angle += 10\n\
      \                    \n                    if self.angle > 180:\n          \
      \              print(\"[Recorder] Maximum angle limit reached. Recording stopped.\"\
      )\n                    break  # recording finished for this trigger\n      \
      \  \n        return len(input_items[0])\n    \n    def _save_file(self):\n \
      \       \"\"\"Save recorded samples to file\"\"\"\n        # Safety check: ensure\
      \ all channels have data\n        if not all(len(channel_data) > 0 for channel_data\
      \ in self.recorded_samples):\n            print(\"[Recorder] Error: Not all\
      \ channels have data. Skipping save.\")\n            return\n        \n    \
      \    # Use the minimum length to avoid index errors\n        min_samples = min(len(channel_data)\
      \ for channel_data in self.recorded_samples)\n        if min_samples == 0:\n\
      \            print(\"[Recorder] Error: No samples recorded. Skipping save.\"\
      )\n            return\n        \n        timestamp = datetime.now().strftime(\"\
      %Y%m%d_%H%M%S\")\n        filename = f\"phase_offset_{self.angle}deg_{timestamp}.dat\"\
      \n        filepath = os.path.join(self.folder, filename)\n        \n       \
      \ with open(filepath, \"w\") as f:\n            f.write(f\"# 3-Channel Phase\
      \ Offset Recording\\n\")\n            f.write(f\"# Angle: {self.angle}\xB0\\\
      n\")\n            f.write(f\"# Timestamp: {timestamp}\\n\")\n            f.write(f\"\
      # Samples per channel: {min_samples}\\n\")\n            f.write(f\"# Format:\
      \ Channel_0, Channel_1, Channel_2\\n\")\n            f.write(\"#\\n\")\n   \
      \         \n            # Write values row by row using min_samples to avoid\
      \ index errors\n            for i in range(min_samples):\n                values\
      \ = [\n                    self.recorded_samples[0][i],\n                  \
      \  self.recorded_samples[1][i], \n                    self.recorded_samples[2][i]\n\
      \                ]\n                f.write(f\"{values[0]:.6f}, {values[1]:.6f},\
      \ {values[2]:.6f}\\n\")\n        \n        print(f\"[Recorder] File saved: {filepath}\
      \ with {min_samples} samples\")\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_to_record: '5'
    skip_interval: '1'
  states:
    _io_cache: ('3-Channel Phase Offset Recorder', 'blk', [('skip_interval', '20'),
      ('samples_to_record', '10')], [('0', 'float', 1), ('1', 'float', 1), ('2', 'float',
      1), ('in', 'message', 1)], [], 'Triggered 3-Channel Float Recorder with Angle
      Stepping', ['samples_to_record', 'skip_interval'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1360, 808.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import os
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 40.0]
    rotation: 0
    state: enabled
- name: qtgui_number_sink_1_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: uncalibrated
    label10: ''
    label2: calibrated
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '180'
    min: '0'
    name: '""'
    nconnections: '2'
    type: float
    unit1: "\xB0"
    unit10: ''
    unit2: "\xB0"
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1800, 320.0]
    rotation: 0
    state: enabled
- name: qtgui_number_sink_1_0_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: uncalibrated
    label10: ''
    label2: calibrated
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '180'
    min: '0'
    name: '"Root MUSIC"'
    nconnections: '2'
    type: float
    unit1: "\xB0"
    unit10: ''
    unit2: "\xB0"
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1520, 160.0]
    rotation: 0
    state: enabled
- name: qtgui_vector_sink_f_0
  id: qtgui_vector_sink_f
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'True'
    gui_hint: ''
    label1: With calibration
    label10: ''
    label2: Without calibration
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '2'
    ref_level: '0'
    showports: 'True'
    update_time: '0.05'
    vlen: input_variables.PSpectrumLength
    width1: '2'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    x_axis_label: '"angle (in degrees)"'
    x_start: '0'
    x_step: 180.0/input_variables.PSpectrumLength
    x_units: '""'
    y_axis_label: '"Pseudo-Spectrum (dB)"'
    y_units: '""'
    ymax: '0'
    ymin: '-30'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1576, 304.0]
    rotation: 0
    state: enabled
- name: variable_qtgui_msg_push_button_0_0
  id: variable_qtgui_msg_push_button
  parameters:
    comment: ''
    gui_hint: ''
    label: Trigger_values
    msgName: pressed
    relBackgroundColor: default
    relFontColor: default
    type: int
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2480, 344.0]
    rotation: 180
    state: enabled

connections:
- [blocks_complex_to_arg_0_0_0_0_1, '0', epy_block_4, '2']
- [blocks_complex_to_arg_0_0_0_0_1_0, '0', epy_block_5, '2']
- [blocks_complex_to_arg_0_0_0_1, '0', epy_block_4, '1']
- [blocks_complex_to_arg_0_0_0_1_0, '0', epy_block_5, '1']
- [blocks_complex_to_arg_0_0_1, '0', epy_block_4, '0']
- [blocks_complex_to_arg_0_0_1_0, '0', epy_block_5, '0']
- [blocks_divide_xx_0, '0', blocks_complex_to_arg_0_0_1, '0']
- [blocks_divide_xx_0_0, '0', blocks_complex_to_arg_0_0_0_1, '0']
- [blocks_divide_xx_0_0_0, '0', blocks_complex_to_arg_0_0_0_0_1, '0']
- [blocks_divide_xx_0_0_0_0, '0', blocks_complex_to_arg_0_0_0_0_1_0, '0']
- [blocks_divide_xx_0_0_1, '0', blocks_complex_to_arg_0_0_0_1_0, '0']
- [blocks_divide_xx_0_1, '0', blocks_complex_to_arg_0_0_1_0, '0']
- [doa_MUSIC_lin_array_0, '0', doa_find_local_max_0, '0']
- [doa_MUSIC_lin_array_0, '0', qtgui_vector_sink_f_0, '1']
- [doa_MUSIC_lin_array_0_0, '0', doa_find_local_max_0_0, '0']
- [doa_MUSIC_lin_array_0_0, '0', qtgui_vector_sink_f_0, '0']
- [doa_antenna_correction_0, '0', blocks_divide_xx_0_0_0_0, '0']
- [doa_antenna_correction_0, '0', blocks_divide_xx_0_0_1, '0']
- [doa_antenna_correction_0, '0', blocks_divide_xx_0_1, '0']
- [doa_antenna_correction_0, '0', doa_autocorrelate_0, '0']
- [doa_antenna_correction_0, '1', blocks_divide_xx_0_1, '1']
- [doa_antenna_correction_0, '1', doa_autocorrelate_0, '1']
- [doa_antenna_correction_0, '2', blocks_divide_xx_0_0_1, '1']
- [doa_antenna_correction_0, '2', doa_autocorrelate_0, '2']
- [doa_antenna_correction_0, '3', blocks_divide_xx_0_0_0_0, '1']
- [doa_antenna_correction_0, '3', doa_autocorrelate_0, '3']
- [doa_autocorrelate_0, '0', doa_MUSIC_lin_array_0, '0']
- [doa_autocorrelate_0, '0', doa_rootMUSIC_linear_array_0_0, '0']
- [doa_autocorrelate_0_0, '0', doa_MUSIC_lin_array_0_0, '0']
- [doa_autocorrelate_0_0, '0', doa_rootMUSIC_linear_array_0, '0']
- [doa_find_local_max_0, '0', blocks_null_sink_0_0, '1']
- [doa_find_local_max_0, '1', epy_block_3, '0']
- [doa_find_local_max_0, '1', qtgui_number_sink_1_0, '1']
- [doa_find_local_max_0_0, '0', blocks_null_sink_0_0, '0']
- [doa_find_local_max_0_0, '1', epy_block_2, '0']
- [doa_find_local_max_0_0, '1', qtgui_number_sink_1_0, '0']
- [doa_phase_correct_hier_0_0, '0', blocks_divide_xx_0, '0']
- [doa_phase_correct_hier_0_0, '0', blocks_divide_xx_0_0, '0']
- [doa_phase_correct_hier_0_0, '0', blocks_divide_xx_0_0_0, '0']
- [doa_phase_correct_hier_0_0, '0', doa_antenna_correction_0, '0']
- [doa_phase_correct_hier_0_0, '0', doa_autocorrelate_0_0, '0']
- [doa_phase_correct_hier_0_0, '1', blocks_divide_xx_0, '1']
- [doa_phase_correct_hier_0_0, '1', doa_antenna_correction_0, '1']
- [doa_phase_correct_hier_0_0, '1', doa_autocorrelate_0_0, '1']
- [doa_phase_correct_hier_0_0, '2', blocks_divide_xx_0_0, '1']
- [doa_phase_correct_hier_0_0, '2', doa_antenna_correction_0, '2']
- [doa_phase_correct_hier_0_0, '2', doa_autocorrelate_0_0, '2']
- [doa_phase_correct_hier_0_0, '3', blocks_divide_xx_0_0_0, '1']
- [doa_phase_correct_hier_0_0, '3', doa_antenna_correction_0, '3']
- [doa_phase_correct_hier_0_0, '3', doa_autocorrelate_0_0, '3']
- [doa_rootMUSIC_linear_array_0, '0', epy_block_1, '0']
- [doa_rootMUSIC_linear_array_0, '0', qtgui_number_sink_1_0_0, '0']
- [doa_rootMUSIC_linear_array_0_0, '0', epy_block_0, '0']
- [doa_rootMUSIC_linear_array_0_0, '0', qtgui_number_sink_1_0_0, '1']
- [doa_x440_usrp_source_0, '0', doa_phase_correct_hier_0_0, '0']
- [doa_x440_usrp_source_0, '1', doa_phase_correct_hier_0_0, '1']
- [doa_x440_usrp_source_0, '2', doa_phase_correct_hier_0_0, '2']
- [doa_x440_usrp_source_0, '3', doa_phase_correct_hier_0_0, '3']
- [variable_qtgui_msg_push_button_0_0, pressed, epy_block_0, in]
- [variable_qtgui_msg_push_button_0_0, pressed, epy_block_1, in]
- [variable_qtgui_msg_push_button_0_0, pressed, epy_block_2, in]
- [variable_qtgui_msg_push_button_0_0, pressed, epy_block_3, in]
- [variable_qtgui_msg_push_button_0_0, pressed, epy_block_4, in]
- [variable_qtgui_msg_push_button_0_0, pressed, epy_block_5, in]

metadata:
  file_format: 1
  grc_version: v3.11.0.0git-992-ga7b5ef78
